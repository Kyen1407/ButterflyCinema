// <auto-generated />
using System;
using System.Collections;
using ButterflyCinema.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ButterflyCinema.Migrations
{
    [DbContext(typeof(ButterflycinemaContext))]
    [Migration("20250725183444_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ButterflyCinema.Models.Cinema", b =>
                {
                    b.Property<string>("CinemaId")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("cinema_id");

                    b.Property<string>("AddressUrl")
                        .HasColumnType("text")
                        .HasColumnName("address_url");

                    b.Property<string>("CinemaAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cinema_address");

                    b.Property<string>("CinemaName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cinema_name");

                    b.HasKey("CinemaId")
                        .HasName("cinemas_pkey");

                    b.ToTable("cinemas", (string)null);
                });

            modelBuilder.Entity("ButterflyCinema.Models.Combo", b =>
                {
                    b.Property<string>("ComboId")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("combo_id");

                    b.Property<string>("ComboImg")
                        .HasColumnType("text")
                        .HasColumnName("combo_img");

                    b.Property<string>("ComboName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("combo_name");

                    b.Property<int?>("ComboPrice")
                        .HasColumnType("integer")
                        .HasColumnName("combo_price");

                    b.Property<BitArray>("ComboStatus")
                        .HasColumnType("bit(1)")
                        .HasColumnName("combo_status");

                    b.HasKey("ComboId")
                        .HasName("combo_pkey");

                    b.ToTable("combo", (string)null);
                });

            modelBuilder.Entity("ButterflyCinema.Models.Comboitem", b =>
                {
                    b.Property<string>("ComboId")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("combo_id");

                    b.Property<string>("ConcessionId")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("concession_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("ComboId", "ConcessionId")
                        .HasName("comboitems_pkey");

                    b.HasIndex("ConcessionId");

                    b.ToTable("comboitems", (string)null);
                });

            modelBuilder.Entity("ButterflyCinema.Models.Concession", b =>
                {
                    b.Property<string>("ConcessionId")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("concession_id");

                    b.Property<string>("ConcessionImg")
                        .HasColumnType("text")
                        .HasColumnName("concession_img");

                    b.Property<string>("ConcessionItem")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("concession_item");

                    b.Property<string>("ConcessionName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("concession_name");

                    b.Property<int?>("ConcessionPrice")
                        .HasColumnType("integer")
                        .HasColumnName("concession_price");

                    b.Property<BitArray>("ConcessionStatus")
                        .HasColumnType("bit(1)")
                        .HasColumnName("concession_status");

                    b.HasKey("ConcessionId")
                        .HasName("concessions_pkey");

                    b.ToTable("concessions", (string)null);
                });

            modelBuilder.Entity("ButterflyCinema.Models.Invoice", b =>
                {
                    b.Property<string>("InvoiceId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("invoice_id");

                    b.Property<int?>("Discount")
                        .HasColumnType("integer")
                        .HasColumnName("discount");

                    b.Property<DateOnly?>("InvoiceDate")
                        .HasColumnType("date")
                        .HasColumnName("invoice_date");

                    b.Property<BitArray>("InvoiceStatus")
                        .HasColumnType("bit(1)")
                        .HasColumnName("invoice_status");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("payment_method");

                    b.Property<string>("ShowtimeId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("showtime_id");

                    b.Property<int?>("TotalAmount")
                        .HasColumnType("integer")
                        .HasColumnName("total_amount");

                    b.Property<string>("UserId")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("user_id");

                    b.Property<int?>("Vat")
                        .HasColumnType("integer")
                        .HasColumnName("vat");

                    b.HasKey("InvoiceId")
                        .HasName("invoice_pkey");

                    b.HasIndex("ShowtimeId");

                    b.HasIndex("UserId");

                    b.ToTable("invoice", (string)null);
                });

            modelBuilder.Entity("ButterflyCinema.Models.Invoicedetail", b =>
                {
                    b.Property<string>("InvoicedetailId")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("invoicedetail_id");

                    b.Property<string>("InvoiceId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("invoice_id");

                    b.Property<string>("ItemId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_id");

                    b.Property<string>("ItemType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("item_type");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int?>("SubTotal")
                        .HasColumnType("integer")
                        .HasColumnName("sub_total");

                    b.Property<int?>("UnitPrice")
                        .HasColumnType("integer")
                        .HasColumnName("unit_price");

                    b.HasKey("InvoicedetailId")
                        .HasName("invoicedetails_pkey");

                    b.HasIndex("InvoiceId");

                    b.ToTable("invoicedetails", (string)null);
                });

            modelBuilder.Entity("ButterflyCinema.Models.Movie", b =>
                {
                    b.Property<string>("MovieId")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("movie_id");

                    b.Property<string>("Actor")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("actor");

                    b.Property<int?>("AgeRestriction")
                        .HasColumnType("integer")
                        .HasColumnName("age_restriction");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("country");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Director")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("director");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<string>("Genre")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("genre");

                    b.Property<string>("LanguageOption")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("language_option");

                    b.Property<string>("MovieName")
                        .HasColumnType("text")
                        .HasColumnName("movie_name");

                    b.Property<string>("Poster")
                        .HasColumnType("text")
                        .HasColumnName("poster");

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.Property<DateOnly?>("ReleaseDate")
                        .HasColumnType("date")
                        .HasColumnName("release_date");

                    b.Property<string>("Trailer")
                        .HasColumnType("text")
                        .HasColumnName("trailer");

                    b.HasKey("MovieId")
                        .HasName("movies_pkey");

                    b.ToTable("movies", (string)null);
                });

            modelBuilder.Entity("ButterflyCinema.Models.News", b =>
                {
                    b.Property<string>("NewId")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("new_id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateOnly?>("PostDate")
                        .HasColumnType("date")
                        .HasColumnName("post_date");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("NewId")
                        .HasName("news_pkey");

                    b.ToTable("news", (string)null);
                });

            modelBuilder.Entity("ButterflyCinema.Models.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("role_id");

                    b.Property<string>("RoleName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId")
                        .HasName("roles_pkey");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("ButterflyCinema.Models.Room", b =>
                {
                    b.Property<string>("RoomId")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("room_id");

                    b.Property<string>("CinemaId")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("cinema_id");

                    b.Property<int?>("RoomName")
                        .HasColumnType("integer")
                        .HasColumnName("room_name");

                    b.Property<BitArray>("RoomStatus")
                        .HasColumnType("bit(1)")
                        .HasColumnName("room_status");

                    b.Property<int?>("TotalSeats")
                        .HasColumnType("integer")
                        .HasColumnName("total_seats");

                    b.HasKey("RoomId")
                        .HasName("rooms_pkey");

                    b.HasIndex("CinemaId");

                    b.ToTable("rooms", (string)null);
                });

            modelBuilder.Entity("ButterflyCinema.Models.Seat", b =>
                {
                    b.Property<string>("SeatId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("seat_id");

                    b.Property<string>("RoomId")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("room_id");

                    b.Property<string>("SeatName")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("seat_name");

                    b.Property<BitArray>("SeatType")
                        .HasColumnType("bit(1)")
                        .HasColumnName("seat_type");

                    b.HasKey("SeatId")
                        .HasName("seats_pkey");

                    b.HasIndex("RoomId");

                    b.ToTable("seats", (string)null);
                });

            modelBuilder.Entity("ButterflyCinema.Models.Showtime", b =>
                {
                    b.Property<string>("ShowtimeId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("showtime_id");

                    b.Property<TimeOnly?>("EndTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end_time");

                    b.Property<string>("Format")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("format");

                    b.Property<string>("MovieId")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("movie_id");

                    b.Property<string>("RoomId")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("room_id");

                    b.Property<DateOnly?>("ShowDate")
                        .HasColumnType("date")
                        .HasColumnName("show_date");

                    b.Property<TimeOnly?>("StartTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start_time");

                    b.HasKey("ShowtimeId")
                        .HasName("showtime_pkey");

                    b.HasIndex("MovieId");

                    b.HasIndex("RoomId");

                    b.ToTable("showtime", (string)null);
                });

            modelBuilder.Entity("ButterflyCinema.Models.Ticket", b =>
                {
                    b.Property<string>("TicketId")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("ticket_id");

                    b.Property<bool?>("IsBooked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_booked");

                    b.Property<string>("SeatId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("seat_id");

                    b.Property<string>("ShowtimeId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("showtime_id");

                    b.Property<int?>("TicketPrice")
                        .HasColumnType("integer")
                        .HasColumnName("ticket_price");

                    b.HasKey("TicketId")
                        .HasName("ticket_pkey");

                    b.HasIndex("SeatId");

                    b.HasIndex("ShowtimeId");

                    b.ToTable("ticket", (string)null);
                });

            modelBuilder.Entity("ButterflyCinema.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("user_id");

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<DateOnly?>("CreationDate")
                        .HasColumnType("date")
                        .HasColumnName("creation_date");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("gender");

                    b.Property<string>("Password")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("phone");

                    b.Property<string>("RoleId")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("role_id");

                    b.Property<string>("UserName")
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("user_name");

                    b.HasKey("UserId")
                        .HasName("users_pkey");

                    b.HasIndex("RoleId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ButterflyCinema.Models.Comboitem", b =>
                {
                    b.HasOne("ButterflyCinema.Models.Combo", "Combo")
                        .WithMany("Comboitems")
                        .HasForeignKey("ComboId")
                        .IsRequired()
                        .HasConstraintName("comboitems_combo_id_fkey");

                    b.HasOne("ButterflyCinema.Models.Concession", "Concession")
                        .WithMany("Comboitems")
                        .HasForeignKey("ConcessionId")
                        .IsRequired()
                        .HasConstraintName("comboitems_concession_id_fkey");

                    b.Navigation("Combo");

                    b.Navigation("Concession");
                });

            modelBuilder.Entity("ButterflyCinema.Models.Invoice", b =>
                {
                    b.HasOne("ButterflyCinema.Models.Showtime", "Showtime")
                        .WithMany("Invoices")
                        .HasForeignKey("ShowtimeId")
                        .HasConstraintName("invoice_showtime_id_fkey");

                    b.HasOne("ButterflyCinema.Models.User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .HasConstraintName("invoice_user_id_fkey");

                    b.Navigation("Showtime");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ButterflyCinema.Models.Invoicedetail", b =>
                {
                    b.HasOne("ButterflyCinema.Models.Invoice", "Invoice")
                        .WithMany("Invoicedetails")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("invoicedetails_invoice_id_fkey");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("ButterflyCinema.Models.Room", b =>
                {
                    b.HasOne("ButterflyCinema.Models.Cinema", "Cinema")
                        .WithMany("Rooms")
                        .HasForeignKey("CinemaId")
                        .HasConstraintName("rooms_cinema_id_fkey");

                    b.Navigation("Cinema");
                });

            modelBuilder.Entity("ButterflyCinema.Models.Seat", b =>
                {
                    b.HasOne("ButterflyCinema.Models.Room", "Room")
                        .WithMany("Seats")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("seats_room_id_fkey");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("ButterflyCinema.Models.Showtime", b =>
                {
                    b.HasOne("ButterflyCinema.Models.Movie", "Movie")
                        .WithMany("Showtimes")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("showtime_movie_id_fkey");

                    b.HasOne("ButterflyCinema.Models.Room", "Room")
                        .WithMany("Showtimes")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("showtime_room_id_fkey");

                    b.Navigation("Movie");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("ButterflyCinema.Models.Ticket", b =>
                {
                    b.HasOne("ButterflyCinema.Models.Seat", "Seat")
                        .WithMany("Tickets")
                        .HasForeignKey("SeatId")
                        .HasConstraintName("ticket_seat_id_fkey");

                    b.HasOne("ButterflyCinema.Models.Showtime", "Showtime")
                        .WithMany("Tickets")
                        .HasForeignKey("ShowtimeId")
                        .HasConstraintName("ticket_showtime_id_fkey");

                    b.Navigation("Seat");

                    b.Navigation("Showtime");
                });

            modelBuilder.Entity("ButterflyCinema.Models.User", b =>
                {
                    b.HasOne("ButterflyCinema.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("users_role_id_fkey");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ButterflyCinema.Models.Cinema", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("ButterflyCinema.Models.Combo", b =>
                {
                    b.Navigation("Comboitems");
                });

            modelBuilder.Entity("ButterflyCinema.Models.Concession", b =>
                {
                    b.Navigation("Comboitems");
                });

            modelBuilder.Entity("ButterflyCinema.Models.Invoice", b =>
                {
                    b.Navigation("Invoicedetails");
                });

            modelBuilder.Entity("ButterflyCinema.Models.Movie", b =>
                {
                    b.Navigation("Showtimes");
                });

            modelBuilder.Entity("ButterflyCinema.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ButterflyCinema.Models.Room", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("Showtimes");
                });

            modelBuilder.Entity("ButterflyCinema.Models.Seat", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("ButterflyCinema.Models.Showtime", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("ButterflyCinema.Models.User", b =>
                {
                    b.Navigation("Invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
